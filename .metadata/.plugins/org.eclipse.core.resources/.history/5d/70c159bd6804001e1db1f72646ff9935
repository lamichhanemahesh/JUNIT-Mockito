package com.luv2code.component;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.ApplicationContext;

import com.luv2code.component.dao.ApplicationDao;
import com.luv2code.component.models.CollegeStudent;
import com.luv2code.component.models.StudentGrades;
import com.luv2code.component.service.ApplicationService;

@SpringBootTest
public class MockAnnotationTest {

	@Autowired
	ApplicationContext context;
	
	@Autowired
	CollegeStudent studentOne;
	
	@Autowired
	StudentGrades studentGrades;
	
//	@Mock
//	private ApplicationDao applicationDao;
//	
//	@InjectMocks
//	private ApplicationService applicationServie;
	
	@MockBean
	private ApplicationDao applicationDao;
	
	@Autowired
	private ApplicationService applicationService;
	
	@BeforeEach
	public void beforeEach() {
		studentOne.setFirstname("Eric");
		studentOne.setLastname("Roby");
		studentOne.setEmailAddress("eric.roby@luv2code.com");
		studentOne.setStudentGrades(studentGrades);
	}
	
	@DisplayName("When & Verify")
	@Test
	public void assertEqualsTestAddGrades() {
		when(applicationDao.addGradeResultsForSingleClass(studentGrades.getMathGradeResults())).thenReturn(100.00);
		assertEquals(100,applicationService.addGradeResultsForSingleClass(studentOne.getStudentGrades().getMathGradeResults()));
		verify(applicationDao,times(1)).addGradeResultsForSingleClass(studentGrades.getMathGradeResults());
	}
	
	
	@DisplayName("Find Gpa")
	@Test
	public void assertEqualsTestFindGpa() {
		
		when(applicationDao.findGradePointAverage(studentGrades.getMathGradeResults()))
		.thenReturn(88.31);
		assertEquals(88.31,applicationService.findGradePointAverage(studentOne.getStudentGrades().getMathGradeResults()));
		
	}
	
	@DiaplayName("Not Null")
	@Test
	public void testAssertNotNull() {
		when(applicationDao.checkNull(studentGrades.getMathGradeResults())).thenReturn(true);
		assertNotNull(applicationService.checkNull(studentOne.getStudentGrades().getMathGradeResults()));
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
