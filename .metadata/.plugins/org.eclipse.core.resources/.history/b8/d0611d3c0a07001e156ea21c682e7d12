package com.luv2code.springmvc;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertIterableEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.web.ModelAndViewAssert;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.web.servlet.ModelAndView;

import com.luv2code.springmvc.models.CollegeStudent;
import com.luv2code.springmvc.models.GradebookCollegeStudent;
import com.luv2code.springmvc.models.MathGrade;
import com.luv2code.springmvc.repository.MathGradesDao;
import com.luv2code.springmvc.repository.StudentDao;
import com.luv2code.springmvc.service.StudentAndGradeService;

@TestPropertySource("/application.properties")
@AutoConfigureMockMvc
@SpringBootTest
public class GradebookControllerTest {
	
	private static MockHttpServletRequest request;
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	private StudentDao studentDao;
	
	@Autowired
	private MockMvc mockMvc;
	
	@Autowired
	private StudentAndGradeService studentService;
	
	@Mock
	private StudentAndGradeService studentCreateServiceMock;
	
	@Autowired
	private MathGradesDao mathGradesDao;
	
	@BeforeAll
	public static void setup() {
		request = new MockHttpServletRequest();
		request.setParameter("firstname","Chad");
		request.setParameter("lastname","Darby");
		request.setParameter("emailAddress","chad.darby@luv2code_school.com");
	}
	
	@BeforeEach
	public void BeforeEach() {
		jdbcTemplate.execute("insert into student(id,firstname,lastname,email_address) values (1,'Eric','Roby','eric.roby@luv2code_school.com')");
		jdbcTemplate.execute("insert into math_grade(id,student_id,grade) values(1,1,100.00)");
		jdbcTemplate.execute("insert into science_grade(id,student_id,grade) values(1,1,100.00)");
		jdbcTemplate.execute("insert into history_grade(id,student_id,grade) values(1,1,100.00)");
	}
	
	@AfterEach
	public void setupAfterTransaction() {
		jdbcTemplate.execute("delete from student");
		jdbcTemplate.execute("delete from history_grade");
		jdbcTemplate.execute("delete from science_grade");
		jdbcTemplate.execute("delete from math_grade");
	}
	
	 
	@Test
	public void getStudentHttpRequest() throws Exception{
		CollegeStudent studentOne = new GradebookCollegeStudent("Eric","Roby","eric_roby@luv2code_school.com");
		CollegeStudent studentTwo = new GradebookCollegeStudent("Chad","Darby","chad_darby@luv2code_school.com");
		
		List<CollegeStudent> collegeStudentList = new ArrayList<>(List.of(studentOne,studentTwo));
		when(studentCreateServiceMock.getGradebook()).thenReturn(collegeStudentList);
		
		assertIterableEquals(collegeStudentList,studentCreateServiceMock.getGradebook());
		
		MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.get("/"))
				.andExpect(status().isOk()).andReturn();
		
		ModelAndView mav = mvcResult.getModelAndView();
		ModelAndViewAssert.assertViewName(mav,"index");
	}
	
	@Test
	public void createStudentHttpRequest() throws Exception{
		CollegeStudent studentOne = new GradebookCollegeStudent("Eric","Roby","eric_roby@luv2code_school.com");
		List<CollegeStudent> collegeStudentList = new ArrayList<>(List.of(studentOne));
		when(studentCreateServiceMock.getGradebook()).thenReturn(collegeStudentList);
		
		MvcResult mvcResult = this.mockMvc.perform(post("/")
				.contentType(MediaType.APPLICATION_JSON)
				.param("firstname", request.getParameterValues("firstname"))
				.param("lastname", request.getParameterValues("lastname"))
				.param("emailAddress", request.getParameterValues("emailAddress")))
				.andExpect(status().isOk()).andReturn();
				
	  ModelAndView mav = mvcResult.getModelAndView();
	  ModelAndViewAssert.assertViewName(mav, "index");
	  
	  CollegeStudent verifyStudent = studentDao.findByEmailAddress("chad.darby@luv2code_school.com");
	  assertNotNull(verifyStudent,"Student should be found");
	  
	}
	
	@Test
	public void deleteStudentHttpRequest() throws Exception {
		assertTrue(studentDao.findById(1).isPresent());
		MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.get("/delete/student/{id}",1))
				.andExpect(status().isOk()).andReturn();
		
		ModelAndView mav = mvcResult.getModelAndView();
		ModelAndViewAssert.assertViewName(mav, "index");
		
		assertFalse(studentDao.findById(1).isPresent());
	}
	
	@Test
	public void deleteStudentHttpRequestErrorPage() throws Exception {
		
		MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.get("/delete/student/{id}",0))
				.andExpect(status().isOk()).andReturn();
		ModelAndView mav = mvcResult.getModelAndView();
		ModelAndViewAssert.assertViewName(mav, "error");
	}
	
	@Test
	public void studentInformationHttpRequest() throws Exception{
		assertTrue(studentDao.findById(1).isPresent());
		
		MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.get("/studentInformation/{id}",1))
				.andExpect(status().isOk()).andReturn();
		ModelAndView mav = mvcResult.getModelAndView();
		ModelAndViewAssert.assertViewName(mav,"studentInformation");
		
	}
	
	@Test
	public void studentInformationHttpStudentDoesNotExistRequest() throws Exception{
		
		assertFalse(studentDao.findById(0).isPresent());
		
		MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.get("/studentInformation/{id}",0))
				.andExpect(status().isOk()).andReturn();
		
		ModelAndView mav = mvcResult.getModelAndView();
		ModelAndViewAssert.assertViewName(mav, "error");
	}
	
	@Test
	public void createValidGradeHttpRequest() throws Exception {
		assertTrue(studentDao.findById(1).isPresent());
		GradebookCollegeStudent student = studentService.studentInformations(1);
		
		assertEquals(1,student.getStudentGrades().getMathGradeResults().size());
	
			MvcResult mvcResult = this.mockMvc.perform(post("/grades")
					.contentType(MediaType.APPLICATION_JSON)
					.param("grade", "85.00")
					.param("gradeType","math")
					.param("studentId","1")).andExpect(status().isOk()).andReturn();
	
		ModelAndView mav = mvcResult.getModelAndView();
		ModelAndViewAssert.assertViewName(mav, "studentInformation");
		
		student = studentService.studentInformations(1);
		assertEquals(2,student.getStudentGrades().getMathGradeResults().size());
		
		
				
	}
	
	@Test
	public void createValidGradeHttpRequestStudentDoesNotExisEmptyResponse() throws Exception{
		
		MvcResult mvcResult = this.mockMvc.perform(post("/grades")
				.contentType(MediaType.APPLICATION_JSON)
				.param("grade", "85.00")
				.param("gradeType","math")
				.param("studentId","0")).andExpect(status().isOk()).andReturn();
		
				ModelAndView mav = mvcResult.getModelAndView();
					ModelAndViewAssert.assertViewName(mav, "error");
		
		
	}
	
	@Test
	public void createNonValidGradeHttpRequestStudentDoesNotExisEmptyResponse() throws Exception{
		
		MvcResult mvcResult = this.mockMvc.perform(post("/grades")
				.contentType(MediaType.APPLICATION_JSON)
				.param("grade", "85.00")
				.param("gradeType","mat")
				.param("studentId","1")).andExpect(status().isOk()).andReturn();
		
				ModelAndView mav = mvcResult.getModelAndView();
					ModelAndViewAssert.assertViewName(mav, "error");
		
		
	}
	
	public void deleteValidGradeHttpRequest() throws Exception {
		
		Optional<MathGrade> mathGrade = mathGradesDao.findById(1);
		assertTrue(mathGrade.isPresent());
		
		MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.get("/grades/{id}/{gradeType}",1,"math")).andExpect(status().isOk()).andReturn();
		
		ModelAndView mav = mvcResult.getModelAndView();
		
		ModelAndViewAssert.assertViewName(mav, "studentInformation");
		mathGrade = mathGradesDao.findById(1);
		
		assertFalse(mathGrade.isPresent());
		
		
		
		
		
		
		
		
		
	}
	
	
	
	
	
	
	
	
}
